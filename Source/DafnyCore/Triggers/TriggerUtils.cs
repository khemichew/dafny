// Copyright by the contributors to the Dafny Project
// SPDX-License-Identifier: MIT

#define DEBUG_AUTO_TRIGGERS

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
namespace MutateCSharp
{
    internal class Schemata484
    {
        private static readonly System.Lazy<long> ActivatedMutantId =
          new System.Lazy<long>(() =>
          {
              var activatedMutant = System.Environment.GetEnvironmentVariable("MUTATE_CSHARP_ACTIVATED_MUTANT484");
              return !string.IsNullOrEmpty(activatedMutant) ? long.Parse(activatedMutant) : 0;
          });

        private static bool ActivatedInRange(long lowerBound, long upperBound)
        {
            return lowerBound <= ActivatedMutantId.Value && ActivatedMutantId.Value <= upperBound;
        }
        internal static bool ReplaceBinExprOp_0(long mutantId, Microsoft.Dafny.Attributes argument1, object argument2)
        {
            if (!ActivatedInRange(mutantId, mutantId + 0)) { return argument1 == argument2; }
            if (ActivatedMutantId.Value == mutantId + 0) { return argument1 != argument2; }
            return argument1 == argument2;
        }

        internal static bool ReplaceBinExprOp_1(long mutantId, System.Func<bool> argument1, System.Func<bool> argument2)
        {
            if (!ActivatedInRange(mutantId, mutantId + 5)) { return argument1() == argument2(); }
            if (ActivatedMutantId.Value == mutantId + 0) { return argument1() || argument2(); }
            if (ActivatedMutantId.Value == mutantId + 1) { return argument1() && argument2(); }
            if (ActivatedMutantId.Value == mutantId + 2) { return argument1() | argument2(); }
            if (ActivatedMutantId.Value == mutantId + 3) { return argument1() & argument2(); }
            if (ActivatedMutantId.Value == mutantId + 4) { return argument1() ^ argument2(); }
            if (ActivatedMutantId.Value == mutantId + 5) { return argument1() != argument2(); }
            return argument1() == argument2();
        }

        internal static bool ReplaceBinExprOp_2(long mutantId, System.Collections.Generic.HashSet<Microsoft.Dafny.OldExpr> argument1, object argument2)
        {
            if (!ActivatedInRange(mutantId, mutantId + 0)) { return argument1 != argument2; }
            if (ActivatedMutantId.Value == mutantId + 0) { return argument1 == argument2; }
            return argument1 != argument2;
        }

        internal static bool ReplaceBinExprOp_3(long mutantId, System.Func<bool> argument1, System.Func<bool> argument2)
        {
            if (!ActivatedInRange(mutantId, mutantId + 5)) { return argument1() && argument2(); }
            if (ActivatedMutantId.Value == mutantId + 0) { return argument1() || argument2(); }
            if (ActivatedMutantId.Value == mutantId + 1) { return argument1() | argument2(); }
            if (ActivatedMutantId.Value == mutantId + 2) { return argument1() & argument2(); }
            if (ActivatedMutantId.Value == mutantId + 3) { return argument1() ^ argument2(); }
            if (ActivatedMutantId.Value == mutantId + 4) { return argument1() == argument2(); }
            if (ActivatedMutantId.Value == mutantId + 5) { return argument1() != argument2(); }
            return argument1() && argument2();
        }

    }
}

namespace Microsoft.Dafny.Triggers
{
    public static class TriggerUtils
    {
        public static Attributes CopyAttributes(Attributes source)
        {
            return MutateCSharp.Schemata484.ReplaceBinExprOp_0(1L, source, null) ? null : new Attributes(source.Name, source.Args, CopyAttributes(source.Prev));
        }

        internal static List<T> MergeAlterFirst<T>(List<T> a, List<T> b)
        {
            Contract.Requires(a != null);
            Contract.Requires(b != null);
            a.AddRange(b);
            return a;
        }

        internal static ISet<T> MergeAlterFirst<T>(ISet<T> a, ISet<T> b)
        {
            Contract.Requires(a != null);
            Contract.Requires(b != null);
            a.UnionWith(b);
            return a;
        }

        internal static bool SameNullity<T>(T x1, T x2) where T : class
        {
            return MutateCSharp.Schemata484.ReplaceBinExprOp_1(2L, () => (x1 == null), () => (x2 == null));
        }

        internal static IEnumerable<Expression> MaybeWrapInOld(Expression expr, HashSet<OldExpr>/*?*/ wrap)
        {
            Contract.Requires(expr != null);
            Contract.Requires(wrap == null || wrap.Count != 0);
            if (MutateCSharp.Schemata484.ReplaceBinExprOp_3(15L, () => MutateCSharp.Schemata484.ReplaceBinExprOp_3(9L, () => MutateCSharp.Schemata484.ReplaceBinExprOp_2(8L, wrap, null), () => !(expr is NameSegment)), () => !(expr is IdentifierExpr)))
            {
                foreach (var w in wrap)
                {
                    var newExpr = new OldExpr(new AutoGeneratedToken(expr.tok), expr, w.At) { AtLabel = w.AtLabel };
                    newExpr.Type = expr.Type;
                    yield return newExpr;
                }
            }
            else
            {
                yield return expr;
            }

            yield break;
        }
    }
}
