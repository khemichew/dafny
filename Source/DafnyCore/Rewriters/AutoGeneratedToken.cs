using System.Diagnostics.Contracts;
namespace MutateCSharp
{
    internal class Schemata442
    {
        private static readonly System.Lazy<long> ActivatedMutantId =
          new System.Lazy<long>(() =>
          {
              var activatedMutant = System.Environment.GetEnvironmentVariable("MUTATE_CSHARP_ACTIVATED_MUTANT442");
              return !string.IsNullOrEmpty(activatedMutant) ? long.Parse(activatedMutant) : 0;
          });

        private static bool ActivatedInRange(long lowerBound, long upperBound)
        {
            return lowerBound <= ActivatedMutantId.Value && ActivatedMutantId.Value <= upperBound;
        }
        internal static bool ReplaceBooleanConstant_0(long mutantId, bool argument1)
        {
            if (!ActivatedInRange(mutantId, mutantId + 0)) { return argument1; }
            if (ActivatedMutantId.Value == mutantId + 0) { return !argument1; }
            return argument1;
        }

    }
}

namespace Microsoft.Dafny
{
    public class AutoGeneratedToken : TokenWrapper
    {
        public AutoGeneratedToken(IToken wrappedToken)
          : base(wrappedToken)
        {
            Contract.Requires(wrappedToken != null);
        }

        public static IToken Unwrap(IToken token)
        {
            if (token is AutoGeneratedToken autoGeneratedToken)
            {
                return Unwrap(autoGeneratedToken.WrappedToken);
            }

            return token;
        }

        public static bool Is(IToken tok)
        {
            while (tok is TokenWrapper w)
            {
                if (w is AutoGeneratedToken)
                {
                    return MutateCSharp.Schemata442.ReplaceBooleanConstant_0(1L, true);
                }
                tok = w.WrappedToken;
            }
            return MutateCSharp.Schemata442.ReplaceBooleanConstant_0(2L, false);
        }

        public static Expression WrapExpression(Expression expr)
        {
            return Expression.CreateParensExpression(new AutoGeneratedToken(expr.tok), expr);
        }

        public override IToken WithVal(string newVal)
        {
            return new AutoGeneratedToken(WrappedToken.WithVal(newVal));
        }
    }
}